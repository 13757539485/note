vpn.maezia.com:8443

1.6至9.0.0：http://androidxref.com/
7.1.2至12.0.0：http://aospxref.com/

nfc pn7160 安卓适配文档
https://www.nxp.com.cn/docs/en/application-note/AN13189.pdf
文档中：
so文件下载地址：
https://github.com/NXP/nfc-NXPNFCC_FW/blob/master/InfraFW/pn7160/32-bit/libpn7160_fw.so
走i2c
i2c0: i2c@ffd71000 {
    status = "ok";
    nxpnfc: nxpnfc@28 {
        compatible = "nxp,nxpnfc";
        reg = <0x28>;
        nxp,nxpnfc-irq = <&gpio26 0 0>;
        nxp,nxpnfc-ven = <&gpio26 2 0>;
        nxp,nxpnfc-fw-dwnld = <&gpio26 4 0>;
    };
};


https://github.com/NXPNFCLinux/nxpnfc/blob/master/i2c_devicetree.txt

板子详情：
https://www.t-firefly.com/product/industry/itx3588j

板子教程
https://wiki.t-firefly.com/zh_CN/Core-3588J/index.html

idea：
智能模块-利用手机AI
主动式交互--ai助手--特定时间点、场景触发ai助手主动交互，语音选择-根据用户性别选择特定性别

1.周末上车后主动推送周边美食、休闲娱乐场所信息(语音以及卡片提醒)，出发后播放对应场景的音乐/故事

2.上下班氛围强化，利用ai播放对应音乐/故事，根据情绪状态推荐(人脸面部表情识别，可能的话)

3.车机上增加一些推荐卡片，ai可以结合情境信息(如时间、地点、天气、用户过往的浏览、购买、评价等行为数据等)，主动向你交互

4.智能家居控制，上班/下班(根据车的位置判定)控制空调，电灯等，防止亮/开一天，防止回到家太热/太暗等

<com.android.systemui.navigationbar.buttons.KeyButtonView
        android:id="@+id/back"
        android:layout_width="100dp"
        android:layout_height="match_parent"
        systemui:keyCode="4"
        android:contentDescription="@string/accessibility_back"
        />


./device/rockchip/common/build/rockchip/rksdk.prop:ro.vendor.rk_sdk=1
./device/rockchip/common/sepolicy/vendor/property_contexts:ro.vendor.rk_sdk                        u:object_r:vendor_system_public_prop:s0
./device/rockchip/rk3588/rk3588_box/rk3588_box.mk:    ro.vendor.rk_sdk=1 \

将当前文件夹下的文件名输出到文件中并在每行最后添加#
find "$(pwd)" -type f -printf "%p#\n" > fullpaths.txt

精简修改
device/rockchip/common/modules/
hdmi_in.mk
rockchip_apps.mk

device/rockchip/rk3588/rk3588_firefly_itx_3588j/rk3588_firefly_itx_3588j.mk
vendor/firefly/apps/apps.mk
build/target/product/handheld_product.mk
百度输入法
build/target/product/handheld_system.mk
build/target/product/handheld_product.mk  LatinIME

https://source.android.google.cn/devices/tech/dalvik/art-class-loader-context?hl=zh-cn
LOCAL_ENFORCE_USES_LIBRARIES := false

https://source.android.google.cn/docs/setup/reference/build-numbers?hl=zh-cn

输入法、语言、横屏
ebe46b8755c2c14ec9b5d503bf396cccc994247f
拖拽
4d125e83516e45d409e168091ab83c1ed4879753
wifi
d8f52b3b6166af38cb0954612ecf92f26642890d



左车机、右车机：宽度549 图标--full right exit | full left exit lo
左手机、右车机：宽度549 图标--full float right exit | full left exit
手机全屏：宽度686 图标--left right float exit 
车机全屏：度686 图标 --left right exit


frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/common/split/DividerView.java
分隔栏bar：mHandle(R.id.docked_divider_handle)

SplitWindowManager初始化在
frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/common/split/SplitLayout.java
private int mTempPosition;
public int getTempPosition() {
        return mTempPosition - mDividePosition;
    }
private void updateBounds(int position) {  
  mTempPosition = position;
  //...
}
启动分屏
frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/splitscreen/StageCoordinator.java

startTasksWithLegacyTransition

@Override
    public void onLayoutSizeChanging(SplitLayout layout) {
        mSyncQueue.runInSync(t -> {
            updateSurfaceBounds(layout, t);
            mMainStage.onResizing(getMainStageBounds(), t, layout.getTempPosition());
            mSideStage.onResizing(getSideStageBounds(), t, layout.getTempPosition());
        });
    }

拖动添加模糊和文字
frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/common/split/SplitDecorManager.java

private static final int ICON_RADIUS = 17;
private TextView mResizingTextView;
private SurfaceControl mScreenshotLeash;
private int mIconLeashWidth, mIconLeashHeight;

布局
frameworks/base/libs/WindowManager/Shell/res/layout/split_decor.xml

<TextView
        android:id="@+id/split_resizing_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="25dp"
        android:textColor="#FF000000"
        android:visibility="gone"
        android:maxLines="1"
        android:ellipsize="end"
        android:textSize="27sp" />
        
mResizingTextView = rootLayout.findViewById(R.id.split_resizing_name);

public void release(SurfaceControl.Transaction t) {
    //...
    if (mScreenshotLeash != null) {
            t.remove(mScreenshotLeash);
            mScreenshotLeash = null;
    }
    //...
}

private String getAppNameFromActivityInfo(Context context, ActivityInfo activityInfo) {
        PackageManager packageManager = context.getPackageManager();
        String name;
        if ("com.cariad.m2".equals(activityInfo.packageName)) {
            name = "投屏";
        } else {
            name = activityInfo.applicationInfo.loadLabel(packageManager).toString();
        }
        return name;
    }

public void onResizing(ActivityManager.RunningTaskInfo resizingTask, Rect newBounds,
                           SurfaceControl.Transaction t, int tempPosition) {
   //...
   boolean isLeftLeash = newBounds.left == SystemBarUtils.SPLIT_LEFT_RIGHT_PADDING;

        if (mScreenshotLeash == null) {
            Rect temp = new Rect(newBounds);
            if (isLeftLeash) {
                temp.offset(-SystemBarUtils.SPLIT_LEFT_RIGHT_PADDING, -newBounds.top);
            } else {
                temp.offset(-newBounds.left, -newBounds.top);
            }
            mScreenshotLeash = ScreenshotUtils.takeScreenshot(t, mHostLeash, temp, SPLIT_DIVIDER_LAYER - 2);
        }
        t.setPosition(mScreenshotLeash, 0, 0);
        int oriWidth = isLeftLeash ? newBounds.width() - tempPosition : newBounds.width() + tempPosition;
        if (oriWidth != 0) {
            float scaleX = newBounds.width() * 1.0f / oriWidth;
            float bgRadius = SystemBarUtils.SPLIT_WINDOW_CORNER_RADIUS * 2 / scaleX;
            t.setMatrix(mScreenshotLeash, scaleX, 0, 0, 1.0f);
            t.setCornerRadius(mScreenshotLeash, bgRadius);
        }
        
        if (mBackgroundLeash == null) {
            //...
            t.setColor(mBackgroundLeash, Color.valueOf(Color.WHITE).getComponents())
                    .setAlpha(mBackgroundLeash, 0.85f)
                    .setBackgroundBlurRadius(mBackgroundLeash, 50)
        }
        if (mIcon == null && resizingTask.topActivityInfo != null) {
            mResizingIconView.setOutlineProvider(new ViewOutlineProvider() {
                @Override
                public void getOutline(View view, Outline outline) {
                    outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(),
                            ICON_RADIUS * view.getContext().getResources().getDisplayMetrics().density);
                }
            });
            mResizingIconView.setClipToOutline(true);
            String appName = getAppNameFromActivityInfo(mResizingIconView.getContext(),
                    resizingTask.topActivityInfo);
            mResizingTextView.setText(appName);
            mResizingTextView.setVisibility(View.VISIBLE);
            //...
            DisplayMetrics displayMetrics = mResizingIconView.getContext().getResources().getDisplayMetrics();
            lp.width = mIconLeashWidth = displayMetrics.widthPixels / 2;

            TextPaint paint = mResizingTextView.getPaint();
            paint.setTextSize(mResizingTextView.getTextSize());
            int textViewWidth = newBounds.width() - mResizingTextView.getPaddingLeft() - mResizingTextView.getPaddingRight();

            StaticLayout staticLayout = StaticLayout.Builder.obtain(appName, 0, appName.length(), paint, textViewWidth)
                    .setMaxLines(mResizingTextView.getMaxLines())
                    .setLineSpacing(mResizingTextView.getLineSpacingExtra(), mResizingTextView.getLineSpacingMultiplier())
                    .setIncludePad(mResizingTextView.getIncludeFontPadding())
                    .build();

            int totalHeight = staticLayout.getHeight() + mResizingTextView.getPaddingTop() + mResizingTextView.getPaddingBottom();
            mIconLeashHeight = (int) (100 * displayMetrics.density + totalHeight);
            lp.height = mIconLeashHeight;
            //...
        }
        t.setPosition(mIconLeash, newBounds.width() / 2.0f - mIconLeashWidth / 2.0f,
                newBounds.height() / 2.0f - mIconLeashHeight / 2.0f);
   //...
}

public void onResized(Rect newBounds, SurfaceControl.Transaction t) {
   if (mScreenshotLeash != null) {
            t.remove(mScreenshotLeash);
            mScreenshotLeash = null;
        }
   if (mIcon != null) {
        //...    
            mResizingTextView.setVisibility(View.GONE);
            mResizingTextView.setText("");
       //... 
   }
}


frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/splitscreen/StageTaskListener.java

void onResizing(Rect newBounds, SurfaceControl.Transaction t, int tempPosition) {
        if (mSplitDecorManager != null && mRootTaskInfo != null && mRootTaskInfo.topActivity != null) {
            if ("com.cariad.m2.car_link_launcher".equals(mRootTaskInfo.topActivity.getPackageName())) {
                int size = mChildrenTaskInfo.size();
                for (int i = 0; i < size; i++) {
                    ActivityManager.RunningTaskInfo runningTaskInfo = mChildrenTaskInfo.valueAt(i);
                    if (runningTaskInfo != null && runningTaskInfo.topActivity != null) {
                        if (!"com.cariad.m2.car_link_launcher".equals(runningTaskInfo.topActivity.getPackageName())) {
                            Log.e(TAG, "onResizing child: " + runningTaskInfo.topActivity.toShortString() );
                            mSplitDecorManager.onResizing(runningTaskInfo, newBounds, t, tempPosition);
                            break;
                        }
                    }
                }
            } else {
                mSplitDecorManager.onResizing(mRootTaskInfo, newBounds, t, tempPosition);
            }
        }
    }

壁纸模糊以及动态控制
用于广播仅限同签名应用使用
frameworks/base/packages/SystemUI/AndroidManifest.xml
<permission android:name="com.android.systemui.permission.WALLPAPER_MASK"
        android:protectionLevel="signature" />
        
frameworks/base/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java

private Engine mEngine;

private WallpaperReceive mWallpaperReceive;

boolean isShowMask;

@Override
public void onCreate() {
        //...
        mWallpaperReceive = new WallpaperReceive();
        IntentFilter filter = new IntentFilter();
        filter.addAction("action.wallpaper.mask_visibility");
        registerReceiver(mWallpaperReceive, filter, "com.android.systemui.permission.WALLPAPER_MASK", null);
    }
    
@Override
    public Engine onCreateEngine() {
        return mEngine = new GLEngine();
    }

@Override
    public void onDestroy() {
        //...
        if (mWallpaperReceive != null) {
            unregisterReceiver(mWallpaperReceive);
        }
    }

class GLEngine extends Engine implements DisplayListener {
    @Override
        public void onMaskData() {
            super.onMaskData();
            if (isShowMask) {
                showOrHideMaskSurfaceControl(true);
            }
        }
}

private class WallpaperReceive extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(TAG, "onReceive() called with: context = [" + context + "], intent = [" + intent + "]"+ this);
            if ("action.wallpaper.mask_visibility".equals(intent.getAction())) {
                if (mEngine != null) {
                    boolean maskShow = intent.getBooleanExtra("mask", false);
                    if (isShowMask == maskShow) {
                        Log.i(TAG, "onReceive not update surface");
                        return;
                    }
                    mEngine.showOrHideMaskSurfaceControl(maskShow);
                    isShowMask = maskShow;
                }
            }
        }
    }

父类
frameworks/base/core/java/android/service/wallpaper/WallpaperService.java
SurfaceControl mMaskSurfaceControl;

SurfaceControl.Transaction mTransaction = new SurfaceControl.Transaction();

public class Engine {
   /**
         * @hide
         */
        public void onMaskData() {

        }
   void detach() {
     //...
     if (mCreated) {
        destroyMaskSurface();
     }
   }
   
   private void destroyMaskSurface() {
            if (mMaskSurfaceControl != null) {
                mTransaction.remove(mMaskSurfaceControl).apply();
                mMaskSurfaceControl = null;
            }
        }
    /**
         * Show mask on wallpaper when enter split mode
         * @hide
         * @param show whether show mask
         */
        public void showOrHideMaskSurfaceControl(boolean show) {
            if (mMaskSurfaceControl == null) {
                Log.e(TAG, "showOrHideMaskSurfaceControl error due to mMaskSurfaceControl is null: show = [" + show + "]");
                return;
            }
            if (show) {
                mTransaction.show(mMaskSurfaceControl);
            } else {
                mTransaction.hide(mMaskSurfaceControl);
            }
            mTransaction.apply();
        }
        
        void updateMaskData(Bitmap bitmap) {
            Bitmap blur = SystemBarUtils.blurBitmap(mDisplayContext, bitmap, 0.3f, 25.0f);
            int width = bitmap.getWidth();
            int height = bitmap.getHeight();
            int format = PixelFormat.RGBA_8888;
            int usage = GraphicBuffer.USAGE_HW_TEXTURE | GraphicBuffer.USAGE_SW_WRITE_OFTEN;
            GraphicBuffer graphicBuffer = GraphicBuffer.create(width, height, format, usage);

            Canvas canvas = graphicBuffer.lockCanvas();
            canvas.drawBitmap(blur, 0, 0, null);
            graphicBuffer.unlockCanvasAndPost(canvas);
            mTransaction.setBuffer(mMaskSurfaceControl, graphicBuffer);
            mTransaction.apply();

            onMaskData();
        }
        private void createMaskSurfaceControl() {
            Log.e(TAG, "createMaskSurfaceControl: " + mMaskSurfaceControl);
            if (mMaskSurfaceControl == null) {
                mMaskSurfaceControl = new SurfaceControl.Builder()
                        .setName("Wallpaper mask layer")
                        .setCallsite("Wallpaper.Mask.Layer")
                        .setParent(mSurfaceControl)
                        .setFormat(PixelFormat.TRANSLUCENT)
                        .setBLASTLayer()
                        .build();
                mTransaction.setColorSpace(mMaskSurfaceControl, ColorSpace.get(ColorSpace.Named.SRGB))
                        .apply();
            }
        }
        
        private Surface getOrCreateBLASTSurface(int width, int height, int format) {
          //...
          if (mBlastBufferQueue == null) {
             createMaskSurfaceControl();
          }
          //...
        }
        
        public void reportShown() {
           mConnection.engineShown(this);

                    if (mEngine != null) {
                        mEngine.updateMaskData(mWallpaperManager.getBitmap(false));
                    }
        }
}


/**
     * Blur the bitmap
     * @param context the context
     * @param bitmap pending bitmap
     * @param scale scale the bitmap to achieve more blur
     * @param radius blur radius between 0~25
     * @return
     */
    public static Bitmap blurBitmap(Context context, Bitmap bitmap, float scale, float radius) {
        if (bitmap == null) {
            return null;
        }
        Log.i("TAG", "blurBitmap bitmap: " + bitmap.getByteCount());
        int oriWidth = bitmap.getWidth();
        int oriHeight = bitmap.getHeight();
        int scaleWidth = Math.round(oriWidth * scale);
        int scaleHeight = Math.round(oriHeight * scale);
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, scaleWidth, scaleHeight, false);
        // 用需要创建高斯模糊bitmap创建一个空的bitmap
        Bitmap outBitmap = Bitmap.createBitmap(scaledBitmap);
        // 初始化Renderscript，该类提供了RenderScript context，创建其他RS类之前必须先创建这个类，其控制RenderScript的初始化，资源管理及释放
        RenderScript rs = RenderScript.create(context);
        // 创建高斯模糊对象
        ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
        // 创建Allocations，此类是将数据传递给RenderScript内核的主要方法，并制定一个后备类型存储给定类型
        Allocation allIn = Allocation.createFromBitmap(rs, scaledBitmap);
        Allocation allOut = Allocation.createFromBitmap(rs, outBitmap);
        //设定模糊度(注：Radius最大只能设置25.f)
        blurScript.setRadius(radius);
        // Perform the Renderscript
        blurScript.setInput(allIn);
        blurScript.forEach(allOut);
        // Copy the final bitmap created by the out Allocation to the outBitmap
        allOut.copyTo(outBitmap);
        // recycle the original bitmap
        bitmap.recycle();
        // After finishing everything, we destroy the Renderscript.
        rs.destroy();
        Bitmap recBitmap = Bitmap.createScaledBitmap(outBitmap, oriWidth, oriHeight, true);
        return applyDarkness(recBitmap, 0.2f);
    }

    public static Bitmap applyDarkness(Bitmap image, float darkness) {
        if (image == null) {
            return null;
        }
        Bitmap outputBitmap = Bitmap.createBitmap(image.getWidth(), image.getHeight(), image.getConfig());
        Canvas canvas = new Canvas(outputBitmap);
        canvas.drawBitmap(image, 0, 0, null);

        Paint paint = new Paint();
        paint.setColor(Color.BLACK);
        paint.setAlpha((int) (darkness * 255));
        canvas.drawRect(0, 0, image.getWidth(), image.getHeight(), paint);

        return outputBitmap;
    }
    
控制壁纸模糊
private void showOrHideWallpaperMask(boolean isShow) {
        Intent intent = new Intent("action.wallpaper.mask_visibility");
        intent.putExtra("mask", isShow);
        context.sendBroadcast(intent);
    }


frameworks/base/services/core/java/com/android/server/wm/DragDropController.java

boolean notifyDropStatus(boolean oriResult, boolean isOtherWindow, IWindow window, DragEvent event, String packageName) {
        if (this.mDragState == null) {
            return false;
        }
        return mDragState.notifyDropStatus(oriResult, isOtherWindow, window, event, packageName);
    }

public void saveBitmap(ParcelFileDescriptor pfd, RemoteCallback callback) {
        CariadDragTransitManager.getInstance().bindShareService(mService.mContext, (isBind, iBinder) -> {
            CariadDragTransitManager.getInstance().saveBitmap(pfd, callback);
        });
    }

    public void shareBarShowOrHide(String action, String targetPackage, ClipData data) {
        CariadDragTransitManager.getInstance().bindShareService(mService.mContext, (isBind, iBinder) -> {
            CariadDragTransitManager.getInstance().shareBarShowOrHide(action, targetPackage, data);
        });
    }


frameworks/base/services/core/java/com/android/server/wm/DragState.java
 private final Interpolator mInterpolator = new PathInterpolator(0.33f, 0.0f, 0.67f, 1.0f);

private SurfaceControl mAddLeash;
    private GraphicBuffer mNoAccept;
    private GraphicBuffer mAddIcon;
    private ValueAnimator mShowAnimator;

    private void visibleAddLeash(boolean isShow) {
        try (SurfaceControl.Transaction transaction =
                     mService.mTransactionFactory.get()) {
            if (mAddLeash != null) {
                if (isShow) {
                    transaction.show(mAddLeash);
                } else {
                    transaction.hide(mAddLeash);
                }
                transaction.apply();
            }
        }
    }

    private void createNoAcceptIcon() {
        if (mNoAccept == null) {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inPreferredConfig = Bitmap.Config.HARDWARE;
            HardwareBuffer hardwareBuffer = BitmapFactory.decodeResource(mService.mContext.getResources(),
                    R.drawable.presence_invisible, options).getHardwareBuffer();
            mNoAccept = GraphicBuffer.createFromHardwareBuffer(hardwareBuffer);
        }
    }

    private void createAddIcon() {
        if (mAddIcon == null) {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inPreferredConfig = Bitmap.Config.HARDWARE;
            HardwareBuffer hardwareBuffer = BitmapFactory.decodeResource(mService.mContext.getResources(),
                    com.android.internal.R.drawable.ic_input_add, options).getHardwareBuffer();
            mAddIcon = GraphicBuffer.createFromHardwareBuffer(hardwareBuffer);
        }
    }

    private void showAddIcon() {
        createAddIcon();
        if (mAddIcon == null) {
            return;
        }
        createStatusLeash();
        try (SurfaceControl.Transaction transaction =
                     mService.mTransactionFactory.get()) {
            transaction.setBuffer(mAddLeash, mAddIcon);
            transaction.setPosition(mAddLeash,
                    mSurfaceControl.getWidth() - mAddIcon.getWidth() / 2.0f, -mAddIcon.getHeight() / 2.0f);
            transaction.show(mAddLeash);
            transaction.apply();
        }
    }

    private void showNoAcceptIcon() {
        createNoAcceptIcon();
        if (mNoAccept == null) {
            return;
        }
        createStatusLeash();
        try (SurfaceControl.Transaction transaction =
                     mService.mTransactionFactory.get()) {
            transaction.setBuffer(mAddLeash, mNoAccept);
            transaction.setPosition(mAddLeash,
                    mSurfaceControl.getWidth() - mNoAccept.getWidth() / 2.0f, -mNoAccept.getHeight() / 2.0f);
            transaction.show(mAddLeash);
            transaction.apply();
        }
    }

    private void createStatusLeash() {
        try (SurfaceControl.Transaction transaction =
                     mService.mTransactionFactory.get()) {
            if (mAddLeash != null) {
                return;
            }
            mAddLeash = new SurfaceControl.Builder()
                    .setName("drag add layer")
                    .setFormat(PixelFormat.TRANSLUCENT)
                    .setParent(mSurfaceControl)
                    .setCallsite("DragState.createShowAnimationLocked")
                    .setBLASTLayer()
                    .build();
            transaction.setColorSpace(mAddLeash, ColorSpace.get(ColorSpace.Named.SRGB)).apply();
        }
    }

    private void createShowAnimationLocked() {
        int width = mSurfaceControl.getWidth();
        int height = mSurfaceControl.getHeight();

        Matrix matrix = new Matrix();
        float[] matrixValues = new float[9];
        mShowAnimator = ValueAnimator.ofPropertyValuesHolder(
                PropertyValuesHolder.ofFloat(ANIMATED_PROPERTY_SCALE, 1.2f, 1.0f),
                PropertyValuesHolder.ofFloat(
                        ANIMATED_PROPERTY_ALPHA, 1, mOriginalAlpha)
        );
        mShowAnimator.addUpdateListener(animation -> {
            if (mSurfaceControl == null && animation.isRunning()) {
                animation.cancel();
                return;
            }
            try (SurfaceControl.Transaction transaction =
                         mService.mTransactionFactory.get()) {
                transaction.setAlpha(
                        mSurfaceControl,
                        (float) animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA));
                float tmpScale = (float) animation.getAnimatedValue(ANIMATED_PROPERTY_SCALE);
                float scaleCenterX = mCurrentX;
                float scaleCenterY = mCurrentY;
                matrix.setScale(tmpScale, tmpScale);
                matrix.postTranslate(scaleCenterX - (width * tmpScale / 2.0f),
                        scaleCenterY - (height * tmpScale / 2.0f));

                transaction.setMatrix(mSurfaceControl, matrix, matrixValues);

                Slog.i("yyyy", "scaleCenterX=" + scaleCenterX + ",w=" + width + ",s=" +  tmpScale
                        + ",scaleCenterY" + scaleCenterY + ",h=" + height);
                transaction.apply();
            }
        });
        mShowAnimator.setDuration(200);
        mShowAnimator.setInterpolator(mInterpolator);
        mShowAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animator) {}

            @Override
            public void onAnimationCancel(Animator animator) {
                mAnimationCompleted = true;
                mDragDropController.sendHandlerMessage(MSG_ANIMATION_END, null);
            }

            @Override
            public void onAnimationRepeat(Animator animator) {}

            @Override
            public void onAnimationEnd(Animator animation) {
//                makeAddLeash();
            }
        });

        mService.mAnimationHandler.post(() -> mShowAnimator.start());
    }
 void updateDragSurfaceLocked(boolean keepHandling, float x, float y) {
        if (mAnimator != null || (mShowAnimator != null && mShowAnimator.isRunning())) {
            return;
        }
        //...
        float width = mSurfaceControl.getWidth() / 2.0f;
        float height = mSurfaceControl.getHeight() / 2.0f;
        mTransaction.setPosition(mSurfaceControl, x - width,y - height).apply();
        //...
 }
 
 
  private int mDragTag = -1; //角标不显示
    private String mCurrentPkg;
    private boolean mLastResult;
    public boolean notifyDropStatus(boolean oriResult, boolean isOtherWindow,
        IWindow window, DragEvent event, String packageName) {
        String mimeType = event.getClipDescription().getMimeType(0);
        if (event.getAction() == DragEvent.ACTION_DROP) {
            int shareActionSize = CariadDragTransitManager.getInstance().getShareActionSize(packageName, mimeType);
            return oriResult || shareActionSize == 1;
        }

        boolean needQuery = false;
        if (mCurrentPkg == null) {
            // 拽起第一次
            Log.e("DragTransit", "packageName first");
            mCurrentPkg = packageName;
            if (isOtherWindow) {
                Log.e("DragTransit", "packageName first other");
                needQuery = true;
            }
        } else {
            if (!packageName.equals(mCurrentPkg)) {
                // 应用切换
                Log.e("DragTransit", "packageName change");
                mCurrentPkg = packageName;
                needQuery = true;
            } else {
                // 应用内
                if (oriResult != mLastResult) {
                    mLastResult = oriResult;
                    Log.e("DragTransit", "result change");
                    needQuery = true;
                }
            }
        }
        if (needQuery) {
            Log.e("DragTransit", "needQuery start");
            int dragTag = -1; // hide
            if (isOtherWindow) {
                Log.e("DragTransit", "needQuery other");
                if (oriResult) {
                    Log.e("DragTransit", "needQuery ori");
                    dragTag = 0;
                } else {
                    int shareActionSize = CariadDragTransitManager.getInstance().getShareActionSize(packageName, mimeType);
                    Log.e("DragTransit", "shareActionSize: " + shareActionSize);
                    if (shareActionSize == 1) {
                        // +
                        dragTag = 0;
                    } else {
                        if (shareActionSize > 1) {
                            // share
                            dragTag = 1;
                        } else {
                            // no accept
                            dragTag = 2;
                        }
                    }
                }
            }
            Log.e("DragTransit", "mDragTag=" + mDragTag + ",dragTag=" + dragTag);
            if (mDragTag != dragTag) {
                mDragTag = dragTag;
                switch (mDragTag) {
                    case 0:
                        showAddIcon();
                        Log.e("DragTransit", "notifyDropStatus show add");
                        break;
                    case 1:
                        // share
//                        break;
                    case 2:
                        showNoAcceptIcon();
                        Log.e("DragTransit", "notifyDropStatus show no accept");
                        break;
                    case -1:
                        visibleAddLeash(false);
                        Log.e("DragTransit", "notifyDropStatus hide");
                        break;
                }
            }
        }

        Slog.i("yuli123", "notifyVirtualDropResult oriResult=" + oriResult +
                ",isOtherWindow=" + isOtherWindow + ",packageName=" + packageName +
                ",window=" + window.asBinder() + ",mLocalWin=" + mLocalWin +
                ",needQuery="+ needQuery);
        return mDragTag == 0;
    }
    
 void closeLocked() {
     //...
     mCurrentPkg = null;
        mDragTag = -1;
        mLastResult = false;
 }
 
 


frameworks/base/core/java/android/view/IWindowSession.aidl

boolean notifyDropStatus(boolean oriResult, boolean isOtherWindow, IWindow window,
             in DragEvent event, String packageName);

    void savaBitmap(in ParcelFileDescriptor pfd, in RemoteCallback callback);

    void shareBarShowOrHide(String action, String targetPackage, in ClipData data);

frameworks/base/services/core/java/com/android/server/wm/Session.java

uid为1000的应用不允许调用拖拽接口，解决validateAndResolveDragMimeTypeExtras通过包名允许即可

@Override
    public boolean notifyDropStatus(boolean oriResult, boolean isOtherWindow, IWindow window, DragEvent event, String packageName) {
        return this.mDragDropController.notifyDropStatus(oriResult, isOtherWindow, window, event, packageName);
    }

    @Override
    public void savaBitmap(android.os.ParcelFileDescriptor pfd, RemoteCallback callback) {
        this.mDragDropController.saveBitmap(pfd, callback);
    }

    @Override
    public void shareBarShowOrHide(String action, String targetPackage, android.content.ClipData data) {
        this.mDragDropController.shareBarShowOrHide(action, targetPackage, data);
    }

frameworks/base/core/java/android/view/CariadDragHelper.java

frameworks/base/services/core/java/com/cariad/m2/CariadDragTransitManager.java
frameworks/base/services/core/java/com/cariad/m2/ICariadDrag.aidl
frameworks/base/services/core/java/com/cariad/m2/ICariadDragListener.aidl

frameworks/base/core/java/android/view/ViewRootImpl.java

private void handleDragEvent(DragEvent event) {
//...
CariadDragHelper.getInstance().preHandleDragEvent(event, mBasePackageName);
boolean result = mView.dispatchDragEvent(event);
result = CariadDragHelper.getInstance()
           .handleDragEvent(event, mBasePackageName, result, mWindowSession, mWindow);
//...
}





frameworks/base/core/java/com/android/internal/policy/DecorView.java

private boolean isActivity() {
        boolean isActivity;
        if ("com.tencent.mm".equals(mContext.getPackageName())) {
            isActivity = mWindow != null && mWindow.getAppToken() != null && !mWindow.isFloating();
        } else {
            isActivity = mWindow != null && mWindow.getAppToken() != null && !mWindow.isFloating() && !mWindow.isTranslucent();
        }
        Log.e(TAG, "isActivity: " + isActivity);
        return isActivity;
    }
private boolean isFullDialog(WindowConfiguration configuration) {
        return configuration.getMaxBounds().equals(configuration.getBounds());
    }
/**
     * add by yuli
     */
    private void createDecorPointBarView() {
        try {
            Log.e(TAG, "createDecorPointBarView start:" +getContext().getPackageName());
            if (mPointBarView == null) {
                final WindowManager.LayoutParams attrs = mWindow.getAttributes();
                final boolean isApplication = attrs.type == TYPE_BASE_APPLICATION ||
                        attrs.type == TYPE_APPLICATION || attrs.type == TYPE_DRAWN_APPLICATION;
                final WindowConfiguration winConfig = getResources().getConfiguration().windowConfiguration;

                boolean isLauncher = "com.cariad.m2.car_link_launcher".equals(getContext().getPackageName());
                if (!isLauncher && (isActivity() || isFullDialog(winConfig)) && isApplication && winConfig.getActivityType() != WindowConfiguration.ACTIVITY_TYPE_HOME) {
                    LayoutParams lp = new LayoutParams(120, 33,
                            Gravity.CENTER_HORIZONTAL);
                    mPointBarView = new PointBarView(getContext());
                    if (mPointBarView.getParent() == null) {
                        post(()-> addView(mPointBarView, lp));
                    }
                    Log.e(TAG, "create PointBarView success");
                }
            }
            if (mPointBarView != null) {
                post(() -> {
                    final WindowConfiguration winConfig = getResources().getConfiguration().windowConfiguration;
                    boolean isSplit = winConfig.getBounds().left != 0;
                    FrameLayout.LayoutParams layoutParams = (LayoutParams) mPointBarView.getLayoutParams();
                    layoutParams.topMargin = isSplit ? 0 : "com.tencent.mm".equals(mContext.getPackageName()) ? 86 : 103;
                    mPointBarView.setLayoutParams(layoutParams);
                    mPointBarView.hidePopupWindowIfNeeded();
                    if (mPointBarView.getParent() == null)
                        addView(mPointBarView, layoutParams);
                    Log.e(TAG, "update PointBarView position: " + layoutParams.topMargin +
                            ",isSplit=" + isSplit + ",bound:" + winConfig.getBounds());
                });
            }
            Log.e(TAG, "createDecorPointBarView end:" +getContext().getPackageName());
        } catch (Exception e) {
            e.printStackTrace();
            Log.d(TAG, "createDecorPointBarView() called error: " + e.getMessage());
        }
    }
    
 private int getTopHeight(boolean statusBarVisible) {
        boolean isWx = "com.tencent.mm".equals(mContext.getPackageName());
        int topHeight = isWx ? 86 : 99;
        return statusBarVisible ? topHeight : topHeight - 86;
    }

    private boolean isStatusBarVisible() {
        return getRootWindowInsets() != null && getRootWindowInsets().isVisible(WindowInsets.Type.statusBars());
    }
@Override
    public WindowInsets onApplyWindowInsets(WindowInsets insets) {
    	//...
	adjustPointBarLayoutParams(insets);
        return insets;
    }    
private void adjustPointBarLayoutParams(WindowInsets insets) {
        Log.e(TAG, "adjustPointBarLayoutParams: " + insets.getSystemWindowInsetsAsRect());
        if (mPointBarView != null && mPointBarView.getLayoutParams() != null) {
            try {
                final WindowConfiguration winConfig = getResources().getConfiguration().windowConfiguration;
                boolean isSplit = winConfig.getBounds().left != 0;
                LayoutParams layoutParams = (LayoutParams) mPointBarView.getLayoutParams();
                boolean statusBarVisible = insets.isVisible(WindowInsets.Type.statusBars())
                        || insets.getSystemWindowInsetTop() > 0;
                layoutParams.topMargin = isSplit ? 0 : getTopHeight(statusBarVisible);
                mPointBarView.post(()->{
                    if (mPointBarView.getParent() == null) {
                        addView(mPointBarView, layoutParams);
                    } else {
                        mPointBarView.setLayoutParams(layoutParams);
                    }
                    Log.e(TAG, "adjustPointBarLayoutParams result: " + layoutParams.topMargin);
                });
            } catch (Exception e) {
                Log.e(TAG, "adjustPointBarLayoutParams error: " + e.getMessage());
            }
        }
    }

<java-symbol type="layout" name="point_bar_popup" />
  <java-symbol type="drawable" name="icon_point_bar_left" />
  <java-symbol type="drawable" name="icon_point_bar_right" />
  <java-symbol type="drawable" name="icon_point_bar_float" />
  <java-symbol type="drawable" name="dots" />
  <java-symbol type="drawable" name="drag_text_bg" />
  <java-symbol type="style" name="Animation.PopupWindow.CariadBar" />

<style name="Animation.PopupWindow.CariadBar">
        <item name="windowEnterAnimation">@anim/cariad_popup_enter</item>
        <item name="windowExitAnimation">@anim/cariad_popup_exit</item>
    </style>
    
圆角动画
frameworks/base/services/core/java/com/android/server/wm/WindowAnimationSpec.java
@Override
    public void apply(Transaction t, SurfaceControl leash, long currentPlayTime) {
      //...
     if (mAnimation.hasRoundedCorners()) {
            t.setCornerRadius(leash, tmp.transformation.getRadius());
     }
   } 

frameworks/base/core/java/android/view/animation/Transformation.java
    
private float mRadius; 
    
public void clear() {
   //...
   mRadius = 0.0f;
}

public void set(Transformation t) {
   //...
   mRadius = t.getRadius();
   //...
}

public void compose(Transformation t) {
    //...
    mRadius += t.getRadius();
    //...
}  
public void postCompose(Transformation t) {
    //...
    mRadius += t.getRadius();
    //...
}  
     
/**
     * Sets the current Transform's radius
     * @hide
     */
    public void setRadius(float radius) {
        mRadius = radius;
    }

    /**
     * Returns the current Transform's radius
     * @hide
     */
    public float getRadius() {
        return mRadius;
    }

开启ProtoLog日志
wm logging enable-text XXX
    
窗口模糊
/device/设备/型号/xxx.mk
PRODUCT_PROPERTY_OVERRIDES += \
       ro.surface_flinger.supports_background_blur=1 
    
    
qq音乐平板：com.tencent.qqmusicpad 当前时长 
qq音乐手机：com.tencent.qqmusic 当前时长  总时长  歌手  歌曲名 
酷狗手机：com.kugou.android  当前时长  总时长  歌手  歌曲名  icon
酷狗大字版：com.kugou.android.elder 当前时长  总时长  歌手  歌曲名 
酷狗TV版：com.kugou.android.tv 当前时长  总时长  歌手  歌曲名 
酷狗概念版：com.kugou.android.lite 当前时长  总时长  歌手  歌曲名 
网易云：com.netease.cloudmusic 当前时长  总时长  歌手  歌曲名  icon
网易云tv版本：com.netease.cloudmusic.tv 当前时长  总时长  歌手  歌曲名 

酷狗车机：com.kugou.android.auto 当前时长  总时长  歌手  歌曲名  icon
网易云车载：com.netease.cloudmusic.iot 当前时长  总时长  歌手  歌曲名  icon
酷我车机：cn.kuwo.kwmusiccar 当前时长  总时长  歌手  歌曲名 
qq音乐车载版：com.tencent.qqmusiccar 当前时长

约束布局使用百分比
<style name="ParentDefaultStyle">
        <item name="android:layout_width">0dp</item>
        <item name="android:layout_height">0dp</item>
        <item name="layout_constraintWidth_default">percent</item>
        <item name="layout_constraintHeight_default">percent</item>
</style>

宽高1：1
<androidx.constraintlayout.widget.Guideline
            android:id="@+id/albumGuidelineL"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            app:layout_constraintGuide_percent="0.097" />

<androidx.constraintlayout.widget.Guideline
    android:id="@+id/albumGuidelineR"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    app:layout_constraintGuide_percent="0.321" />

<androidx.appcompat.widget.AppCompatImageView
    android:id="@+id/album"
    style="@style/ParentDefaultStyle"
    android:layout_marginBottom="@dimen/dp50"
    android:src="@mipmap/default_album"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintDimensionRatio="1:1"
    app:layout_constraintEnd_toStartOf="@id/albumGuidelineR"
    app:layout_constraintStart_toEndOf="@+id/albumGuidelineL"
    app:layout_constraintTop_toTopOf="parent" />   

gradle下载地址：
http://mirrors.cloud.tencent.com/gradle/
替换：
.gradle/wrapper/dists/
            
歌曲播放：            
1、展示歌曲专辑头像、歌曲相关信息
2、支持控制歌曲模式、歌曲播放
3、多行歌词
4、正在唱的歌词高亮
5、支持查看播放列表，切换播放列表中的歌曲播放
k歌：
1、支持设置伴奏音量
2、支持开启关闭原唱



